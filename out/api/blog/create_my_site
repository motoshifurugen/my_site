{"slug":"create_my_site","title":"Reactでポートフォリオサイトを作成する 🚀（1）","date":"2024-10-27","tags":["React","JavaScript","ポートフォリオ"],"content":"\n## はじめに\n\n「自分にとって新しい技術をインプットしたい」と「長く残るアウトプットを作りたい」という思いから、Reactを使ってポートフォリオサイトの作成に挑戦してみることにしました。\nこの記事を含め、複数回に分けて作成過程を記録していきます。今回は以下の内容についてご紹介します。\n\n- Nextアプリ作成\n- サイト共通デザインの設定\n- Headerの作成\n- 【TOP画面】テキストアニメーションの作成\n- 【TOP画面】メインメッセージ部分作成\n- 【TOP画面】背景画像の設定\n\n今回の開発環境は以下の通りです。\n\n| 利用環境    | バージョン              |\n| ----------- | ----------------------- |\n| macOS       | Sonoma 14.5（M1チップ） |\n| Node.js     | 20.12.2                 |\n| React       | 18                      |\n| Next.js     | 14.2.5                  |\n| TypeScript  | 5                       |\n| tailwindcss | 3.4.1                   |\n\n### デザインの参考にするサイト（完成イメージ）\n\n[TOP | 株式会社パズル](https://puzzle-inc.jp/)\n[szne](https://szn.jp/)\n\n参考にした上記サイトやGithub Copilotを活用し、無事にポートフォリオを完成させることができました。本当にありがとうございます！\n\n### キャッチアップ方法\n\n[【2024年最新】React(v18)完全入門ガイド｜Hooks、Next14、Redux、TypeScript | Udemy](https://www.udemy.com/course/react-complete-guide/?couponCode=KEEPLEARNING)\n\n## Nextアプリ作成\n\n```zsh:ターミナル\nnpx create-next-app@latest\n```\n\n```zsh:ターミナル\nNeed to install the following packages:\ncreate-next-app@14.2.5\nOk to proceed? (y)\n```\n\nyを入力してエンターを押し、続けて聞かれる質問には好みで答えます。\n意味については以下を参考にしました。\n\n[create-next-appで訊かれていること](https://zenn.dev/ikkik/articles/51d97ff70bd0da)\n\n```zsh:ターミナル\n✔ What is your project named? … my-site\n✔ Would you like to use TypeScript? … Yes\n✔ Would you like to use ESLint? … Yes\n✔ Would you like to use Tailwind CSS? … Yes\n✔ Would you like to use `src/` directory? … Yes\n✔ Would you like to use App Router? (recommended) … Yes\n✔ Would you like to customize the default import alias (@/*)? … No\n```\n\n```zsh:ターミナル\ncd my-site\nnpm run dev\n```\n\nこの状態で`http://localhost:3000/`にアクセスすると、初のnext.jsと対面できました。\n\n<img\n  src=\"https://i.gyazo.com/e9b392b216d7f9e592e57478f739d4d7.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\npage.tsxのreturn内とglobals.cssにいなくなってもらい、`Hello My Site!`を表示させました。\n\n<img\n  src=\"https://i.gyazo.com/74548e4eb1e10dac0201374654e12f27.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## サイト共通デザインの設定\n\ntailwindcssは、あらかじめ用意されたCSSクラスをタグに指定してスタイルを適用させることができます。利用方法は`tailwind.css`をimportして、適用させたいスタイルのクラスを`className`を指定するだけです。\n\n```javascript:page.tsx\nimport 'tailwindcss/tailwind.css'\n\nexport default function Home() {\n  return (\n    <body>\n      <h1 className=\"text-black\">Hello My Site!</h1>\n    </body>\n  )\n}\n```\n\nここでは、サイト全体で使用するカラーとフォントを`tailwind.config.ts`に定義し、`globals.css`でbodyにスタイルを適用しました。\n\n```javascript:tailwind.config.ts\nimport type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    colors: {\n      'bg-main' : '#F6F6F6',\n      'font-main' : '#161616',\n    },\n    fontFamily: {\n      'ryo-gothic-plusn': ['\"ryo-gothic-plusn\"', 'sans-serif'],\n    }\n  },\n  plugins: [],\n};\nexport default config;\n```\n\n```css:globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  @apply bg-bg-main text-font-main font-ryo-gothic-plusn;\n}\n```\n\n## Headerの作成\n\nヘッダー用に`components/Header.tsx`を新規で作成しました。\n\n```javascript:Header.tsx\nimport Link from 'next/link'\nimport 'tailwindcss/tailwind.css'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center\">\n        <a className=\"flex font-medium items-center mb-4 md:mb-0\">\n          <span className=\"ml-3 text-xl\">Motoshi Furugen</span>\n        </a>\n        <nav className=\"md:ml-auto flex flex-wrap items-center text-base justify-center\">\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            プロフィール\n          </Link>\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            開発ブログ\n          </Link>\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            実績\n          </Link>\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            コンタクト\n          </Link>\n        </nav>\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n```\n\n`layout.tsx`でHeaderコンポーネントを呼び出しました。\n\n```javascript:layout.tsx\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nimport Header from \"./components/Header\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Motoshi Furugen\",\n  description: \"This is Motoshi Furugen's personal website.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Header />\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n<img\n  src=\"https://i.gyazo.com/b8bd5cc99c95d0e26252a14e1f2e42b5.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## 【TOP画面】テキストアニメーションの作成\n\nTOPページのタイトルにどうしてもアニメーションを入れたかったので、GSAPを導入しました。\n\nhttps://gsap.com/\n\n```zsh:ターミナル\nnpm install gsap\n```\n\n`components/TitleAnimation.tsx`を新規で作成し、GSAPを使って文字を一文字ずつ表示させるアニメーションを実現しました。\n\n```javascript:TitleAnimation.tsx\n'use client'\n\nimport { useEffect, useRef } from 'react'\nimport gsap from 'gsap'\nimport { TextPlugin } from 'gsap/TextPlugin'\n\ngsap.registerPlugin(TextPlugin)\n\nexport default function TitleAnimation() {\n  // 文字を一文字ずつ表示するアニメーション\n  const textRef = useRef < HTMLParagraphElement > null\n  useEffect(() => {\n    if (textRef.current) {\n      gsap.to(textRef.current, { duration: 1.75, text: 'Furugen' })\n    }\n  }, [])\n\n  return (\n    <p\n      className=\"\n        w-full\n        text-[8rem]\n        text-left\n        text-font-main\n        font-dm-sans\n        tracking-widest\n        mx-[100px]\n      \"\n      ref={textRef}\n    ></p>\n  )\n}\n```\n\n<img\n  src=\"https://i.gyazo.com/41b11105b154beb85eda4f36df65a0cc.gif\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## 【TOP画面】メインメッセージ部分作成\n\n`components/MainMessage.txs`を作成し、メインメッセージを記述しました。\n\n```javascript:MainMessage.tsx\nexport default function MainMessage() {\n  return (\n    <>\n      <p className=\"text-2xl leading-loose\">\n        心の健康を支えるために、\n        <br />\n        画面の向こうに広がる世界へ、\n        <br />\n        想いをコードに込め、\n        <br />\n        毎日挑戦し続ける、\n        <br />\n        なんくるないさ系エンジニア。\n      </p>\n    </>\n  )\n}\n```\n\n`page.tsx`にて、`TitleAnimation`コンポーネントと`MainMessage`コンポーネントを横並びに表示しました。\n\n```javascript:page.tsx\n・・・\n<section className=\"main-face flex\">\n  <div className=\"flex-1\">\n    <TitleAnimation />\n  </div>\n  <div className=\"w-[480px]\">\n    <MainMessage />\n  </div>\n</section>\n・・・\n```\n\nアイコンを使いたいので、以下を参考にfont Awesome（無料版）を導入しました。\n\n- [Set Up with React | Font Awesome Docs](https://docs.fontawesome.com/web/use-with/react)\n- [【Next.js】FontAwesomeを導入してアイコンを表示してみよう！ #Next.js - Qiita](https://qiita.com/takakou/items/de4d86f1acad6e4511d5)\n\nメインメッセージの下には、次回作成するプロフィール画面へのリンクを設置しました。\n\n```javascript:MainMessage.tsx\n<>\n  <p className=\"text-2xl leading-loose mb-12\">\n    心の健康を支えるために、\n    <br />\n    画面の向こうに広がる世界へ、\n    <br />\n    想いをコードに込め、\n    <br />\n    毎日挑戦し続ける、\n    <br />\n    なんくるないさ系エンジニア。\n  </p>\n  <a href=\"#\" className=\"text-xl group\">\n    プロフィール\n    <button\n      className=\"relative align-middle transition-all w-8 max-w-[32px] h-8 max-h-[32px] text-xs border border-font-main border-opacity-20 rounded-full ml-5 group-hover:bg-white\"\n      type=\"button\"\n    >\n      <span>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </span>\n    </button>\n  </a>\n</>\n```\n\n<img\n  src=\"https://i.gyazo.com/984edc81e2cf3fdfb8116bd69d6a42a0.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## 【TOP画面】背景画像の設定\n\nトップ画面で大きく海の画像を載せたいと思い、背景画像用のコンポーネント`components/BackgroundWrapper.tsx`を新たに作成しました。\n\n`usePathname()`を用いて現在のパスを取得し、トップページの場合のみ背景画像を表示させるようにしました。\n\n```javascript:BackgroundWrapper.tsx\n\"use client\";\n\nimport { usePathname } from 'next/navigation';\nimport React from 'react';\n\nconst BackgroundWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const pathname = usePathname();\n  const isRootPath = pathname === '/';\n\n  return (\n    <div className=\"relative\">\n      {isRootPath && (\n        <div className=\"absolute inset-0 bg-cover bg-center bg-no-repeat opacity-50 h-screen\" style={{ backgroundImage: \"url('/images/back-pic/day_01.jpg')\" }}></div>\n      )}\n      <div className={`${isRootPath ? 'relative z-10' : ''}`}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundWrapper;\n```\n\n`layout.tsx`でbody内の要素を`BackgroundWrapper`コンポーネントで囲い、トップ画面にドーンと表示させました。\n\n```javascript:layout.tsx\n<html lang=\"en\">\n  <body className={inter.className}>\n    <BackgroundWrapper>\n      <Header />\n      <main className=\"pt-40\">{children}</main>\n    </BackgroundWrapper>\n  </body>\n</html>\n```\n\nなんか文字のアニメーションがバグみたいに見えてきたので（笑）アニメーションの速度を調整して、トップ画面の実装が完了しました。\n\n<img\n  src=\"https://i.gyazo.com/1bb143e42a4deacbbd0bed7026e1f1e4.gif\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n### to be continued...\n\n次回はプロフィール画面の作成を行います。\n"}