[{"slug":"cakephp_install_for_mac_with_mamp","title":"CakePHP3.9をMacにインストールする（MAMP使用）","date":"2020-10-02","tags":["PHP","MAMP","環境構築"],"content":"\n## 環境\n\nバージョンは下記\n\n- OS：MacOS Catalina 10.15.4\n\n- PHP：7.3.22\n\n- Composer：1.10.13\n\n今回はデータベースについては触れません\n\n以下記事でデータベース入れました▼\n[CakePHP3.9にMySQLを接続する（Homebrew使用）](https://qiita.com/motoshi_cocoa/items/0e2489bfe4ae9cf9d5a9)\n\n## MAMPのダウンロード\n\n- MAMP参考\n  https://qiita.com/kuro-wassan/items/1cb32995acc07a4b4cc6\n\n- MAMPのサイト\n  https://www.mamp.info/en/downloads/ からMac用のMAMPをダウンロードする。\n\n- ApplicationsフォルダのなかにMAMPがダウンロードされる。\n\n## CakePHPのアプリの作成\n\n- CakePHP3.9 公式\n  https://book.cakephp.org/3/ja/installation.html\n\n- MAMPが落ちたところへ行く\n\n```bash:ターミナル\n$ cd Applications\n$ ls\n$ cd MAMP\n```\n\n↑MAMPが複数ある場合は名前が違うことがあるので注意\n\n- htdocsに入る（この中にCakePHPアプリをおきたい）\n\n```bash:ターミナル\n$ cd htdocs\n```\n\n- CakePHPアプリの作成\n\n```bash:ターミナル\n$ php composer.phar create-project --prefer-dist cakephp/app:^3.8 app_name\n```\n\nまたは\n\n```bash:ターミナル\n$ composer self-update && composer create-project --prefer-dist cakephp/app:^3.8 app_name\n```\n\nでCakePHPのアプリが作られる（`app_name`のところには任意のアプリ名を入れる）\n\n```bash:ターミナル\nUpdating to version 1.10.13 (stable channel).\n   Downloading (100%)\nUse composer self-update --rollback to return to version 1.10.5\nCreating a \"cakephp/app:^3.8\" project at \"./app_name\"\nInstalling cakephp/app (3.9.0)\n.\n.\n. 省略\n.\n.\n> App\\Console\\Installer::postInstall\nCreated `config/app_local.php` file\nCreated `/Applications/MAMP/htdocs/app_name/tmp/cache/views` directory\nSet Folder Permissions ? (Default to Y) [Y,n]?\n```\n\n↑ファイルの権限を設定していいかcomposerに聞かれるけどYと答えてEnter。\n\n- アプリが作成されているか確認してアプリフォルダに入る\n\n```bash:ターミナル\n$ ls\napp_name\n$ cd app_name\n```\n\n- 起動！\n\n```bash:ターミナル\n$ bin/cake server\n```\n\n```bash:ターミナル\nWelcome to CakePHP v3.9.2 Console\n---------------------------------------------------------------\nApp : src\nPath: /Applications/MAMP/htdocs/app_name/src/\nDocumentRoot: /Applications/MAMP/htdocs/app_name/webroot\nIni Path:\n---------------------------------------------------------------\nbuilt-in server is running in http://localhost:8765/\nYou can exit with `CTRL-C`\n```\n\n- 上記のような表示が出たら成功\n\n- ブラウザで `http://localhost:8765/` にアクセスしてみる\n\n![スクリーンショット 2020-10-02 0.29.04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/247bd690-37dd-fd2a-bb64-e5fff6e7d92f.png)\n\nここまで。\n"},{"slug":"cakephp_install_mysql","title":"CakePHP3.9にMySQLを接続する（Homebrew使用）","date":"2020-10-11","tags":["PHP","環境構築","MySQL"],"content":"\n### 環境\n\nOS：MacOS Catalina 10.15.4\nPHP：7.3.22\nComposer：1.10.13\nHomebrew：2.5.5\nMySQL：8.0.21\n\n- 前回の記事：[CakePHP3.9をMacにインストールする（MAMP使用）](https://qiita.com/motoshi_cocoa/items/6b2c3065e23d1bd05be5)\n\n以下のようにデータベース設定が未完了。今回はCakePHPでMySQLに接続するのが目的。\n![データベース接続前のCakePHPの画面](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/b7069ac5-b646-dcc6-3495-fad05a6ad1e9.png)\n\n### この記事の流れ\n\n1. MySQLをインストール・起動\n\n1. エラーが出た（エラーなしなら飛ばす）\n\n1. MySQL初期設定\n\n1. CakePHPのデータベース設定\n\n1. CakePHP起動\n\n## 1. MySQLをインストール・起動\n\nパッケージ管理ツールHomebrewを使用してMysqlをインストールする。\n参考記事▼\n[【簡単】MacにHomebrewをインストールする方法と基本的な使い方](https://fukatsu.tech/homebrew)\n\n```bash:ターミナル\n$ brew install mysql\n```\n\n```bash:ターミナル\n$ mysql --version\nmysql  Ver 8.0.21 for osx10.15 on x86_64 (Homebrew)\n```\n\nインストールされたらCakePHPのアプリまで移動してからMySQLを起動。\n\n```bash:ターミナル\n$ mysql.server start\n```\n\n## 2. エラーが出た（エラーなしなら飛ばす）\n\nMySQLを起動しようとしたらエラーが出たので、手当たり次第ボタンがあれば連打した。\n\n▼エラー内容\n\n```bash:ターミナル\n./usr/local/Cellar/mysql/8.0.21_1/bin/mysqld_safe: line 144: /usr/local/var/mysql/[コンピュータ名].local.err: Permission denied\n/usr/local/Cellar/mysql/8.0.21_1/bin/mysqld_safe: line 144: /usr/local/var/mysql/[コンピュータ名].local.err: Permission denied\n/usr/local/Cellar/mysql/8.0.21_1/bin/mysqld_safe: line 199: /usr/local/var/mysql/[コンピュータ名].local.err: Permission denied\n/usr/local/Cellar/mysql/8.0.21_1/bin/mysqld_safe: line 144: /usr/local/var/mysql/[コンピュータ名].local.err: Permission denied\nERROR! The server quit without updating PID file (/usr/local/var/mysql/[コンピュータ名].local.pid).\n```\n\n- 権限がない\n  → sudoコマンドで実行する。\n\n- PIDファイルが .... ?\n  → このエラー文は様々な要因が考えられるらしい。\n  → そもそもファイルがなかったので作成。\n\n```bash:ターミナル\n$ sudo touch /usr/local/var/mysql/[コンピュータ名].local.pid\n```\n\nそれでもエラーは消えなかった。\n\n/usr/local/var/mysql/[コンピュータ名].local.err という場所に詳しいエラーが書いてあるらしいので確認しにいく。\n\n```bash:ターミナル\n$ sudo cat /usr/local/var/mysql/[コンピュータ名].local.err\n```\n\n[ERROR]となっているところを発見！\n\n```bash:ターミナル\n2020-10-10T16:38:01.565742Z 0 [ERROR] [MY-010274] [Server] Could not open unix socket lock file /tmp/mysql.sock.lock.\n2020-10-10T16:38:01.566306Z 0 [ERROR] [MY-010268] [Server] Unable to setup unix socket lock file.\n2020-10-10T16:38:01.567056Z 0 [ERROR] [MY-010119] [Server] Aborting\n```\n\n/tmp/mysql.sock.lockファイルにいなくなってもらう。\n\n```bash:ターミナル\n$ sudo rm /tmp/mysql.sock.lock\n```\n\nいざ、（sudoで）MySQL起動！\n\n```bash:ターミナル\n$ sudo mysql.server start\nStarting MySQL\n.. SUCCESS!\n```\n\n## 3. MySQL初期設定\n\nパスワードなしでMySQLにログインする。\n\n```bash:ターミナル\n$ mysql -uroot\n```\n\n- パスワード設定\n\n使うデータベースを指定して\n\n```bash:ターミナル\nmysql> use mysql;\n```\n\nrootユーザーのパスワードを [設定したいパスワード] に変更する。\n\n```bash:ターミナル\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '[設定したいパスワード]';\n```\n\n一旦、退出。\n\n```bash:ターミナル\nmysql> exit\n```\n\nパスワード使用でログインする。\n\n```bash:ターミナル\n$ mysql -uroot -p\nEnter password: [設定したパスワード]\n```\n\n## 4. CakePHPのデータベース設定\n\n- データベース作成\n\nMySQLでデータベース一覧を確認する。\n\n```bash:ターミナル\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n```\n\nCakePHPで使用するデータベースを新規で作成する。（今回はcake_sampleという名前で作成）\n\n```bash:ターミナル\nmysql> create database cake_sample;\n```\n\n先ほど作成したデータベースを一覧で確認する。\n\n```bash:ターミナル\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| cake_sample        |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n```\n\nMySQLは設定完了。\n\n```bash:ターミナル\nmysql> exit\n```\n\n- CakePHPのデータベース設定\n\nCakePHPアプリの config/app.local.php をテキストエディタで開き、username, password, databaseを変更する。\n\n```php:/config/app.local.php（変更後）\n    'Datasources' => [\n        'default' => [\n            'host' => 'localhost',\n            'username' => 'root', //変更\n            'password' => '[設定したパスワード]', //変更\n            'database' => 'cake_sample', //変更\n            'log' => true,\n            'url' => env('DATABASE_URL', null),\n        ],\n    ],\n```\n\nmysqlを再起動させる。\n\n```bash:ターミナル\n$ sudo mysql.serve restart\nShutting down MySQL\n.. SUCCESS!\nStarting MySQL\n. SUCCESS!\n```\n\n## 5. CakePHP起動\n\n```bash:ターミナル\n$ bin/cake server\n```\n\nブラウザで `http://localhost:8765/` にアクセスして以下のようにdatabaseのアイコンが緑色になれば成功！\n![データベース接続完了後のCakePHPの画面](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/4183987c-0420-33f5-4065-d1e207f7b8a4.png)\n\nここまで。\n\n接続はできたけど、毎回sudo使うことになったり、そもそも[Homebrewでsudoは使ってはいけないという情報](https://teratail.com/questions/263973)を発見。課題。\n\n### 参考記事\n\n- データベース設定について：[MySQL8.0 認証方式を変更する(Laravel5)](https://qiita.com/ucan-lab/items/3ae911b7e13287a5b917)\n\n- MySQLエラーについて：[MySQL5.7が起動できない。](https://qiita.com/gaogaomango/items/933a1f55004920a4323d)\n\nありがとうございました。\n"},{"slug":"create_my_site","title":"Reactでポートフォリオサイトを作成する 🚀（1）","date":"2024-10-27","tags":["React","JavaScript","ポートフォリオ"],"content":"\n## はじめに\n\n「自分にとって新しい技術をインプットしたい」と「長く残るアウトプットを作りたい」という思いから、Reactを使ってポートフォリオサイトの作成に挑戦してみることにしました。\nこの記事を含め、複数回に分けて作成過程を記録していきます。今回は以下の内容についてご紹介します。\n\n- Nextアプリ作成\n- サイト共通デザインの設定\n- Headerの作成\n- 【TOP画面】テキストアニメーションの作成\n- 【TOP画面】メインメッセージ部分作成\n- 【TOP画面】背景画像の設定\n\n今回の開発環境は以下の通りです。\n\n| 利用環境    | バージョン              |\n| ----------- | ----------------------- |\n| macOS       | Sonoma 14.5（M1チップ） |\n| Node.js     | 20.12.2                 |\n| React       | 18                      |\n| Next.js     | 14.2.5                  |\n| TypeScript  | 5                       |\n| tailwindcss | 3.4.1                   |\n\n### デザインの参考にするサイト（完成イメージ）\n\n[TOP | 株式会社パズル](https://puzzle-inc.jp/)\n[szne](https://szn.jp/)\n\n参考にした上記サイトやGithub Copilotを活用し、無事にポートフォリオを完成させることができました。本当にありがとうございます！\n\n### キャッチアップ方法\n\n[【2024年最新】React(v18)完全入門ガイド｜Hooks、Next14、Redux、TypeScript | Udemy](https://www.udemy.com/course/react-complete-guide/?couponCode=KEEPLEARNING)\n\n## Nextアプリ作成\n\n```zsh:ターミナル\nnpx create-next-app@latest\n```\n\n```zsh:ターミナル\nNeed to install the following packages:\ncreate-next-app@14.2.5\nOk to proceed? (y)\n```\n\nyを入力してエンターを押し、続けて聞かれる質問には好みで答えます。\n意味については以下を参考にしました。\n\n[create-next-appで訊かれていること](https://zenn.dev/ikkik/articles/51d97ff70bd0da)\n\n```zsh:ターミナル\n✔ What is your project named? … my-site\n✔ Would you like to use TypeScript? … Yes\n✔ Would you like to use ESLint? … Yes\n✔ Would you like to use Tailwind CSS? … Yes\n✔ Would you like to use `src/` directory? … Yes\n✔ Would you like to use App Router? (recommended) … Yes\n✔ Would you like to customize the default import alias (@/*)? … No\n```\n\n```zsh:ターミナル\ncd my-site\nnpm run dev\n```\n\nこの状態で`http://localhost:3000/`にアクセスすると、初のnext.jsと対面できました。\n\n<img\n  src=\"https://i.gyazo.com/e9b392b216d7f9e592e57478f739d4d7.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\npage.tsxのreturn内とglobals.cssにいなくなってもらい、`Hello My Site!`を表示させました。\n\n<img\n  src=\"https://i.gyazo.com/74548e4eb1e10dac0201374654e12f27.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## サイト共通デザインの設定\n\ntailwindcssは、あらかじめ用意されたCSSクラスをタグに指定してスタイルを適用させることができます。利用方法は`tailwind.css`をimportして、適用させたいスタイルのクラスを`className`を指定するだけです。\n\n```javascript:page.tsx\nimport 'tailwindcss/tailwind.css'\n\nexport default function Home() {\n  return (\n    <body>\n      <h1 className=\"text-black\">Hello My Site!</h1>\n    </body>\n  )\n}\n```\n\nここでは、サイト全体で使用するカラーとフォントを`tailwind.config.ts`に定義し、`globals.css`でbodyにスタイルを適用しました。\n\n```javascript:tailwind.config.ts\nimport type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    colors: {\n      'bg-main' : '#F6F6F6',\n      'font-main' : '#161616',\n    },\n    fontFamily: {\n      'ryo-gothic-plusn': ['\"ryo-gothic-plusn\"', 'sans-serif'],\n    }\n  },\n  plugins: [],\n};\nexport default config;\n```\n\n```css:globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  @apply bg-bg-main text-font-main font-ryo-gothic-plusn;\n}\n```\n\n## Headerの作成\n\nヘッダー用に`components/Header.tsx`を新規で作成しました。\n\n```javascript:Header.tsx\nimport Link from 'next/link'\nimport 'tailwindcss/tailwind.css'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center\">\n        <a className=\"flex font-medium items-center mb-4 md:mb-0\">\n          <span className=\"ml-3 text-xl\">Motoshi Furugen</span>\n        </a>\n        <nav className=\"md:ml-auto flex flex-wrap items-center text-base justify-center\">\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            プロフィール\n          </Link>\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            開発ブログ\n          </Link>\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            実績\n          </Link>\n          <Link className=\"mr-10 hover:opacity-50\" href=\"#\">\n            コンタクト\n          </Link>\n        </nav>\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n```\n\n`layout.tsx`でHeaderコンポーネントを呼び出しました。\n\n```javascript:layout.tsx\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\n\nimport Header from \"./components/Header\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Motoshi Furugen\",\n  description: \"This is Motoshi Furugen's personal website.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <Header />\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n<img\n  src=\"https://i.gyazo.com/b8bd5cc99c95d0e26252a14e1f2e42b5.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## 【TOP画面】テキストアニメーションの作成\n\nTOPページのタイトルにどうしてもアニメーションを入れたかったので、GSAPを導入しました。\n\nhttps://gsap.com/\n\n```zsh:ターミナル\nnpm install gsap\n```\n\n`components/TitleAnimation.tsx`を新規で作成し、GSAPを使って文字を一文字ずつ表示させるアニメーションを実現しました。\n\n```javascript:TitleAnimation.tsx\n'use client'\n\nimport { useEffect, useRef } from 'react'\nimport gsap from 'gsap'\nimport { TextPlugin } from 'gsap/TextPlugin'\n\ngsap.registerPlugin(TextPlugin)\n\nexport default function TitleAnimation() {\n  // 文字を一文字ずつ表示するアニメーション\n  const textRef = useRef < HTMLParagraphElement > null\n  useEffect(() => {\n    if (textRef.current) {\n      gsap.to(textRef.current, { duration: 1.75, text: 'Furugen' })\n    }\n  }, [])\n\n  return (\n    <p\n      className=\"\n        w-full\n        text-[8rem]\n        text-left\n        text-font-main\n        font-dm-sans\n        tracking-widest\n        mx-[100px]\n      \"\n      ref={textRef}\n    ></p>\n  )\n}\n```\n\n<img\n  src=\"https://i.gyazo.com/41b11105b154beb85eda4f36df65a0cc.gif\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## 【TOP画面】メインメッセージ部分作成\n\n`components/MainMessage.txs`を作成し、メインメッセージを記述しました。\n\n```javascript:MainMessage.tsx\nexport default function MainMessage() {\n  return (\n    <>\n      <p className=\"text-2xl leading-loose\">\n        心の健康を支えるために、\n        <br />\n        画面の向こうに広がる世界へ、\n        <br />\n        想いをコードに込め、\n        <br />\n        毎日挑戦し続ける、\n        <br />\n        なんくるないさ系エンジニア。\n      </p>\n    </>\n  )\n}\n```\n\n`page.tsx`にて、`TitleAnimation`コンポーネントと`MainMessage`コンポーネントを横並びに表示しました。\n\n```javascript:page.tsx\n・・・\n<section className=\"main-face flex\">\n  <div className=\"flex-1\">\n    <TitleAnimation />\n  </div>\n  <div className=\"w-[480px]\">\n    <MainMessage />\n  </div>\n</section>\n・・・\n```\n\nアイコンを使いたいので、以下を参考にfont Awesome（無料版）を導入しました。\n\n- [Set Up with React | Font Awesome Docs](https://docs.fontawesome.com/web/use-with/react)\n- [【Next.js】FontAwesomeを導入してアイコンを表示してみよう！ #Next.js - Qiita](https://qiita.com/takakou/items/de4d86f1acad6e4511d5)\n\nメインメッセージの下には、次回作成するプロフィール画面へのリンクを設置しました。\n\n```javascript:MainMessage.tsx\n<>\n  <p className=\"text-2xl leading-loose mb-12\">\n    心の健康を支えるために、\n    <br />\n    画面の向こうに広がる世界へ、\n    <br />\n    想いをコードに込め、\n    <br />\n    毎日挑戦し続ける、\n    <br />\n    なんくるないさ系エンジニア。\n  </p>\n  <a href=\"#\" className=\"text-xl group\">\n    プロフィール\n    <button\n      className=\"relative align-middle transition-all w-8 max-w-[32px] h-8 max-h-[32px] text-xs border border-font-main border-opacity-20 rounded-full ml-5 group-hover:bg-white\"\n      type=\"button\"\n    >\n      <span>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </span>\n    </button>\n  </a>\n</>\n```\n\n<img\n  src=\"https://i.gyazo.com/984edc81e2cf3fdfb8116bd69d6a42a0.png\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n## 【TOP画面】背景画像の設定\n\nトップ画面で大きく海の画像を載せたいと思い、背景画像用のコンポーネント`components/BackgroundWrapper.tsx`を新たに作成しました。\n\n`usePathname()`を用いて現在のパスを取得し、トップページの場合のみ背景画像を表示させるようにしました。\n\n```javascript:BackgroundWrapper.tsx\n\"use client\";\n\nimport { usePathname } from 'next/navigation';\nimport React from 'react';\n\nconst BackgroundWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const pathname = usePathname();\n  const isRootPath = pathname === '/';\n\n  return (\n    <div className=\"relative\">\n      {isRootPath && (\n        <div className=\"absolute inset-0 bg-cover bg-center bg-no-repeat opacity-50 h-screen\" style={{ backgroundImage: \"url('/images/back-pic/day_01.jpg')\" }}></div>\n      )}\n      <div className={`${isRootPath ? 'relative z-10' : ''}`}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundWrapper;\n```\n\n`layout.tsx`でbody内の要素を`BackgroundWrapper`コンポーネントで囲い、トップ画面にドーンと表示させました。\n\n```javascript:layout.tsx\n<html lang=\"en\">\n  <body className={inter.className}>\n    <BackgroundWrapper>\n      <Header />\n      <main className=\"pt-40\">{children}</main>\n    </BackgroundWrapper>\n  </body>\n</html>\n```\n\nなんか文字のアニメーションがバグみたいに見えてきたので（笑）アニメーションの速度を調整して、トップ画面の実装が完了しました。\n\n<img\n  src=\"https://i.gyazo.com/1bb143e42a4deacbbd0bed7026e1f1e4.gif\"\n  alt=\"screenshot\"\n  width=\"600px\"\n/>\n\n### to be continued...\n\n次回はプロフィール画面の作成を行います。\n"},{"slug":"recaptcha_2_install","title":"reCAPTCHA(リキャプチャ)導入","date":"2021-03-18","tags":["reCAPTCHA","PHP","セキュリティ"],"content":"\n## reCAPTCHAとは\n\nreCAPTCHA（リキャプチャ）とは、CAPTCHAと呼ばれる\nボットの攻撃からWebサイトを守る機能の一種。\n\nCAPTCHAとは「completely automated public Turing test to tell computers and humans apart 」の略で、人間とコンピュータを区別するためのテストというような意味を持つ。\n\n具体的な方法としては、下の画像のように崩れた文字を認識させたり、あてはまる画像を選択させたりする。\n\n![reCAPTCHAv1の例](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/a219bdd0-62ec-4a2c-7fb2-24c5432211c8.png)\n![reCAPTCHAv2の例](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/43588993-9150-4b6b-ef14-c7631dfc7021.png)\n\n2021年2月現在、reCAPTCHAはv1（提供停止）、v2、v3まで開発されてGoogleが提供している。\n\nreCAPTCHAについて詳しく書かれた記事はこちら▼\n[「reCAPTCHA」って？スパム対策に効果的なreCAPTCHAをフォームに入れてみた](https://www.synergy-marketing.co.jp/blog/using_recaptcha_on_form)\n\n## reCAPTCHA v2 導入手順\n\nクライアント側につける「サイトキー」とサーバー側につける「シークレットキー」によって機能をつけることができる。メール送信フォームを参考に、鍵を作成→クライアント側(HTMLとjQuery)を記述→サーバー側(PHP)を記述という流れで実装する。\n\n1. Google reCAPTCHA にアクセス\n   https://www.google.com/recaptcha/about/\n   ![スクリーンショット 2021-02-04 23.55.32.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/55e07f03-c734-1bb2-eefc-f2cabb7c1d10.png)\n\n1. Admin Consoleをクリックしたあと「＋」ボタンから新規作成ページへ行く。\n   ![スクリーンショット 2021-02-05 0.03.14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/18fa70ed-2711-683a-9a33-86cefc9bc9d8.png)\n\n1. 名前、バージョン（今回はv2をチェック）、ドメインをそれぞれ入力して送信。\n   ![スクリーンショット 2021-02-05 0.01.21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/b52d85bf-3223-7a57-1502-1441e218132c.png)\n\n1. サイトキーとシークレットキーが表示されるので、閉じずにそのままにしておく。\n\n1. HTMLでメール送信フォームを作り、サーバー側でreCAPCHAのデータをチェックする\n\n```HTML:html\n<html>\n<head>\n    <!-- reCAPTCHAapi読み込み -->\n    <script src='https://www.google.com/recaptcha/api.js'></script>\n    <!-- jQuery読み込み -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n</head>\n<body>\n    <form id=\"form\" method=\"post\">\n        <div>\n            <label for=\"name\">名前</label>\n            <input type=\"text\" id=\"name\">\n        </div>\n        <div>\n            <label for=\"email\">メールアドレス</label>\n            <input  type=\"email\" id=\"email\">\n        </div>\n        <div>\n            <label for=\"body\">本文</label>\n            <textarea id=\"body\"></textarea>\n        </div>\n        <!-- formタグの内側でreCAPTHA登場場所を記述 サイトキーを入れる-->\n        <div class=\"g-recaptcha\" data-callback=\"onSubmit\" data-sitekey=\"\"></div>\n        <!-- 送信ボタンのデフォルトをdisaledにする -->\n        <button type=\"submit\" class=\"submit-button\" disabled>送信</button>\n    </form>\n    <script>\n    function onSubmit(recaptcha) {\n        if (recaptcha !== ''){\n            // reCAPTHAによるチェックをしたあとは送信ボタンを押せるようにする\n            $('.submit-button').removeAttr('disabled');\n        }\n    }\n    </script>\n</body>\n</html>\n```\n\n```php:php\n// メール送信処理の中で\n\n    $recaptcha = h($this->request->data['g-recaptcha-response']);\n    if (isset($recaptcha)) {\n        $captcha = $recaptcha;\n    } else {\n        $captcha = '';\n    }\n    // シークレットキーを入れる\n    $secretKey = \"\";\n    $resp = @file_get_contents(\"https://www.google.com/recaptcha/api/siteverify?secret={$secretKey}&response={$captcha}\");\n    $resp_result = json_decode($resp,true);\n    if(intval($resp_result[\"success\"]) !== 1) {\n        // reCAPTCHA承認失敗時の処理\n    } else {\n        // reCAPTCHA承認成功時の処理\n    }\n```\n\nこれで、v2のreCAPTHAを実装できた。\n![スクリーンショット 2021-02-05 1.04.38.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/594194/1a4ac286-bcfe-85dc-d10a-de22ebdae845.png)\n\nただし日々のコンピュータの進化は早く、これらを突破するソフトウェアやreCAPCHTAの脆弱性についてもすでにいくつか報告されている。\n\nコンピュータと人を見分けるテスト。熱い戦いが続きそう。\n\n### 参考にさせてもらった記事\n\n[Googleの「reCAPTCHA」を5分で実装する](https://liapoc.com/recaptcha.html)\n"}]